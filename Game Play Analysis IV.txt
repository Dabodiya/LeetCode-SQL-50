																Problem Statement



Table: Activity

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| player_id    | int     |
| device_id    | int     |
| event_date   | date    |
| games_played | int     |
+--------------+---------+
(player_id, event_date) is the primary key (combination of columns with unique values) of this table.
This table shows the activity of players of some games.
Each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.

Write a solution to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. In other words, you need to determine the number of players who logged in on the day immediately following their initial login, and divide it by the number of total players.

The result format is in the following example.

 

Example 1:

Input: 
Activity table:
+-----------+-----------+------------+--------------+
| player_id | device_id | event_date | games_played |
+-----------+-----------+------------+--------------+
| 1         | 2         | 2016-03-01 | 5            |
| 1         | 2         | 2016-03-02 | 6            |
| 2         | 3         | 2017-06-25 | 1            |
| 3         | 1         | 2016-03-02 | 0            |
| 3         | 4         | 2018-07-03 | 5            |
+-----------+-----------+------------+--------------+
Output: 
+-----------+
| fraction  |
+-----------+
| 0.33      |
+-----------+
Explanation: 
Only the player with id 1 logged back in after the first day he had logged in so the answer is 1/3 = 0.33



My Submission - 


with cte1 as 
(
select COALESCE(count(distinct player_id),0) as total_users from activity
),

cte2 as 
(
select player_id, device_id, event_date, next_login from 
(select *,row_number() over(partition by player_id order by event_date) as rn from
(select player_id, device_id, event_date, LEAD(event_date,1) over(partition by player_id order by event_date) as next_login from activity) as subq
where subq.next_login is not null) as subq2
where subq2.rn = 1 
having
datediff(next_login,event_date) = 1
)

select COALESCE(round(count(distinct cte2.player_id)/cte1.total_users,2),0) as fraction from cte2,cte1;